using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    class ProjectEulerSolutions
    {
        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23.
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        public void MultiplesOf3And5()
        {
            int sum = 0;
            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sum += i;
                }
            }
            Console.WriteLine("1 : Multiples of 3 and 5");
            Console.WriteLine(sum);
        }
        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be:
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        public void EvenFibinacciNumbers()
        {
            int sum = 0;
            int fib1 = 1;
            int fib2 = 2;
            int fibTemp = 0;
            while (fib1 <= 4000000 && fib2 <= 4000000)
            {
                if (fib2 % 2 == 0)
                {
                    sum += fib2;
                }
                fibTemp = fib1 + fib2;
                fib1 = fib2;
                fib2 = fibTemp;
            }
            Console.WriteLine("2 : Even Fibinacci Numbers");
            Console.WriteLine(sum);
        }
        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        /// What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        public void LargestPrimeFactor()
        {
            long number = 600851475143;
            long numberTemp = number;
            long largestFactor = 0;
            int counter = 3;
            while (counter * counter <= numberTemp)
            {
                if (numberTemp % counter == 0)
                {
                    numberTemp = numberTemp / counter;
                    largestFactor = counter;
                }
                else
                {
                    counter += 2;
                }
            }
            if (numberTemp > largestFactor)
            {
                largestFactor = numberTemp;
            }
            Console.WriteLine("3 : Largest Prime Factor");
            Console.WriteLine(largestFactor);
        }
        /// <summary>
        /// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        public void LargestPalindromeProduct()
        {
            int product = 0;
            string productString;
            int largestPalindrome = 0;
            for (int i = 999; i > 0; i--)
            {
                for (int j = 999; j > 0; j--)
                {
                    product = i * j;
                    productString = product.ToString();
                    char[] palindromeArray = productString.ToCharArray();
                    int counter = palindromeArray.Length - 1;
                    bool flag = true;
                    for (int k = 0; k < palindromeArray.Length; k++)
                    {
                        if (!palindromeArray[k].Equals(palindromeArray[counter]))
                        {
                            flag = false;
                            break;
                        }
                        counter--;
                    }
                    if (flag)
                    {
                        if (product > largestPalindrome)
                        {
                            largestPalindrome = product;
                        }
                    }
                }
            }
            Console.WriteLine("4 : Largest Palindrome Product");
            Console.WriteLine(largestPalindrome);
        }
        /// <summary>
        /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        /// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        /// </summary>
        public void SmallestMultiple()
        {
            int number = 20;
            while (true)
            {
                bool flag = true;
                for (int i = 1; i < 21; i++)
                {
                    if (number % i != 0)
                    {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                {
                    break;
                }
                number += 20;
            }
            Console.WriteLine("5 : Smallest Multiple");
            Console.WriteLine(number);
        }
        /// <summary>
        /// The sum of the squares of the first ten natural numbers is,
        /// 1^2 + 2^2 + ... + 10^2 = 385
        /// The square of the sum of the first ten natural numbers is,
        /// (1 + 2 + ... + 10)^2 = 55^2 = 3025
        /// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
        /// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        /// </summary>
        public void SumSquareDifference()
        {
            int sumOFSquares = 0;
            int squareOfSums = 0;
            for (int i= 1; i <= 100; i++)
            {
                sumOFSquares += i * i;
                squareOfSums += i;
            }
            squareOfSums *= squareOfSums;
            int difference = squareOfSums - sumOFSquares;
            Console.WriteLine("6 : Sum Square Difference");
            Console.WriteLine(difference);
        }
    }
}
